type Mutation{
    newCourse(course: CourseInput!): Course!
    updateCourse(course: CourseInput!): Course!
    deleteCourse(id: ID!): Course!
}

input CourseInput{
    id: ID
    title: String!
    description: String!
    clases: Int!
    time: Float!
    level: Level=ALL
    logo: String!
    path: String!
    teacher: String!
}

type Query{
    "Students information list"
    students: [Student!]!
     "Student information from the academy selected by ID"
    student(id: ID!): Student!
    "Courses information list"
    courses: [Course!]!
    "Course information from the academy selected by ID"
    course(id: ID!): Course!

}

"Students information"
type Student {
    "Identification student"
    id:ID!
    name: String!
    email: String!
    website: String
    courses: [Course!]!
}

type Course{
    id: ID!
    title: String!
    description: String!
    clases: Int!
    time: Float!
    level: Level!
    logo: String!
    path: String!
    teacher: String!
    students: [Student!]!
    reviews: [Valoration!]!
}

enum Level{
    ALL
    NOVATE
    MEDIUM
    EXPERT
}

type Valoration{
    id: ID!
    name: String!
    points: Float!
    comment: String
}